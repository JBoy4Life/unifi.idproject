body contain useshell {
  useshell => "useshell";
}

body contain exec_owner(uid) {
  exec_owner => "$(uid)";
}

bundle common unifi_environment {
    vars:
    # CFEngine Defaults 
      "cfengine_masterfiles"
          string => "/var/cfengine/masterfiles/";
      "cfengine_local_store_dir"
          string => "/var/cfengine/local";

    # Network/Environment  
      "hst_policy_server"
          string => readfile( "/var/cfengine/policy_server.dat", 0);
      #"hst_policy_server" string => "10.0.80.10";
      #"hst_app"           string => "10.0.80.11";
      #"hst_services"      string => "10.0.80.12";
      #"hst_db"            string => "10.0.80.13";
      #"hst_agent"         string => "10.0.80.14";
      #"hst_logs"          string => "10.0.80.15";

    # Gets around the issue of file copies (remote_cp) failing on the policy (or all in one) server(s)
      "policy_filecopy_host"
          string => ifelse(reglist(@(sys.ip_addresses), "$(hst_policy_server)"), "localhost", "$(hst_policy_server)");

    # Application Specific
    ## Papertrail
      "papertrail_destination_host"
          string => getenv("UNIFI_PAPERTRAIL_HOST", "100");
      "papertrail_destination_port"
          string => getenv("UNIFI_PAPERTRAIL_PORT", "5");
      "papertrail_destination_proto"
          string => "udp";
    ## Librato
      "appoptics_api_key"
          string => getenv("UNIFI_APPOPTICS_APIKEY", "100");
    ## NTP
      "ntp_server_type"
          string => "pool";
      "ntp_server"
          string => "1.uk.pool.ntp.org";
}

# Set appropriate Unifi.id-specific classes.
bundle common unifi {
  vars:
      "unifi_env"
          string => getenv("UNIFI_ENV", 20);
      "unifi_roles"
          slist => splitstring(getenv("UNIFI_ROLES", 50), ",", "5");
      "unifi_nodeid"
          string => getenv("UNIFI_NODEID", 20);
      "unifi_clientid"
          string => getenv("UNIFI_CLIENT_ID", 20);
  classes:
      "unifi_env_$(unifi_env)"
          expression => "any";
      "unifi_role_$(unifi_roles)"
          expression => "any";
      "unifi_nodeid_$(unifi_nodeid)"
          expression => "any";
      "unifi_clientid_$(unifi_clientid)"
          expression => "any";
  reports:
      "Detected unifi.id environment: $(unifi_env).";
      "Detected unifi.id role: $(unifi_roles).";
      "Detected unifi.id node ID: $(unifi_nodeid).";
      "Detected unifi.id client ID: $(unifi_clientid).";
      "Detected we are a policy server: $(is_policy_server).";
}

# Dispatch based on node roles.
bundle agent unifi_role {
  meta:
    "tags" slist => {
        "autorun"
    };
  methods:
    any::
      "unifi_baseline";
    unifi_role_app::
      "unifi_role_app";
    unifi_role_services::
      "unifi_role_services";
    unifi_role_agent::
      "unifi_role_agent";
    unifi_role_db::
      "unifi_role_db"; 
}

# Configuration common to all node types.
bundle agent unifi_baseline {
  vars:
      "baseline_packages"
          slist => {
              "ack",
              "curl",
              "debconf-utils",
              "git",
              "net-tools",
              "tcpdump",
              "vim"
          };
  packages:
      "$(baseline_packages)"
          policy => "present",
          package_module => apt_get;
  methods:
    any::
      "chrony";
      "collectd";
      "syslogng";
    !unifi_env_local::
      "unifi_apt_s3";
}

# App server configuration: node from which frontend is served.
bundle agent unifi_role_app {
  methods:
    any::
      "yarn";
      "nginx";
    !unifi_env_local::
      "unifi_core_web";
}

# Services configuration: backend services.
bundle agent unifi_role_services {
  methods:
    any::
      "rabbitmq";
      "oracle_java_jdk";
    !unifi_env_local::
      "unifi_core_services";
  packages:
      "maven"
          policy => "present",
          package_module => apt_get;
}

# Agent configuration: common configuration for agents deployed on site.
bundle agent unifi_role_agent {
  methods:
    any::
      "rabbitmq";
      "oracle_java_jdk";
    !unifi_env_local::
      "unifi_core_agent";
}

# DB configuration: PostgreSQL node.
bundle agent unifi_role_db {
  methods:
      "postgresql";
}

bundle agent unifi_apt_s3 {
  vars:
      "gpg_sig"
          string => "7838 C665 B08E 3C3F 2B78  168D 65B8 59F0 3EA4 78F0";
      "apt_transport_s3_url"
          string => "https://github.com/BashtonLtd/apt-transport-s3/releases/download/v1.3.0/apt-transport-s3_1.3.0-1_all.deb";
  classes:
      "s3_apt_installed"
          expression => fileexists("/usr/lib/apt/methods/s3");
      "apt_key_added"
          expression => returnszero("APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 /usr/bin/apt-key list | /bin/fgrep \"$(gpg_sig)\"", "useshell");
  files:  
    "/etc/apt/sources.list.d/unifi_id.list"
      comment => "Copy APT Repository config",
      perms => mo("644","root"),
      copy_from => remote_cp("$(unifi_environment.cfengine_masterfiles)/files/apt/unifi.list","$(unifi_environment.policy_filecopy_host)"),

      action => if_elapsed("60");
    "/etc/apt/s3auth.conf"
      comment => "Copy s3 auth credentials for the apt repository",
      perms => mo("600","root"),
      copy_from => remote_cp("$(unifi_environment.cfengine_masterfiles)/files/apt/s3auth.conf","$(unifi_environment.policy_filecopy_host)"),

      action => if_elapsed("60");
  commands:
    !s3_apt_installed::
      "/usr/bin/wget -O /tmp/apt_transport.deb ${apt_transport_s3_url} && dpkg -i /tmp/apt_transport.deb && rm -fv /tmp/apt_transport.deb"
          contain => useshell;
    !apt_key_added::
      "/usr/bin/curl -sS https://s3.eu-west-2.amazonaws.com/unifi-id-apt/apt-gpg-key.pub | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 /usr/bin/apt-key add -"
          contain => useshell;
  packages:
      "python-configobj"
          policy => "present",
          package_module => apt_get;
}

bundle agent unifi_core_agent {
  packages:
      "unifi-core-agent"
          policy => "present",
          package_module => apt_get;

  services:
      "unifi-core-agent"
        service_policy => "start";
      
  commands: 
    restart_unifi_core_agent:: 
      "/bin/systemctl restart unifi-core-agent" 
         contain => in_shell_and_silent; 
}

bundle agent unifi_core_services {
  packages:
      "unifi-core"
          policy => "present",
          package_module => apt_get;
  services:
      "unifi-core"
          service_policy => "start";
  commands:
    restart_unifi_core_services::
      "/bin/systemctl restart unifi-core"
        contain => in_shell_and_silent;
}

bundle agent unifi_core_web {
  packages:
      "unifi-core-web"
          policy => "present",
          package_module => apt_get;
}
